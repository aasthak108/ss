#AND LOGIC PROGRAM USING PERCEPTRON RULE program

import numpy as np 
def unitStep(v):
    if v >= 0:
        return 1
    else:
        return 0
  
# design Perceptron Model
def perceptronModel(x, w, b):
    v = np.dot(w, x) + b
    y = unitStep(v)
    return y
  
# AND Logic Function
# w1 = 1, w2 = 1, b = -1.5
def AND_logicFunction(x):
    w = np.array([1, 1])
    b = -1.5
    return perceptronModel(x, w, b)
  
# testing the Perceptron Model
test1 = np.array([0, 1])
test2 = np.array([1, 1])
test3 = np.array([0, 0])
test4 = np.array([1, 0])
  
print("AND({}, {}) = {}".format(0, 1, AND_logicFunction(test1)))
print("AND({}, {}) = {}".format(1, 1, AND_logicFunction(test2)))
print("AND({}, {}) = {}".format(0, 0, AND_logicFunction(test3)))
print("AND({}, {}) = {}".format(1, 0, AND_logicFunction(test4)))




#LINEAR REGRESSION USING GRADIENT DESCENT program
import numpy as np
import matplotlib.pyplot as plt
np.random.seed(42)

x = np.array([2, 3, 4 , 5, 6])
y = np.array([1, 3, 2, 4, 3])

m = 0
c = 0
alpha = 0.01

plt.plot(x, (m*x+c), "blue", linestyle="dashed", linewidth=3.0)
n = len(x)

for i in range(1000):
  E = (1/n) * (np.sum(np.square((y-(m*x+c)))))
  D_m = (-2/n) * (np.sum((y-(m*x+c))*x))
  D_c = (-2/n)* (np.sum((y-(m*x+c))))
  m = m - alpha * D_m
  c = c - alpha * D_c
  plt.plot(x, m*x+c)

plt.plot(x, m*x+c, "black", linewidth=3.0)
print("The cost function is : ", E)
print("The value of m is :", m)
print("The value of c is :", c)
plt.plot(x, y, 'ro')
plt.show()



#KNN CLUSTERING PROGRAM
import numpy as np
import matplotlib.pyplot as plt

x = [4, 5, 10, 4, 3, 11, 14, 8, 10, 12]
y = [21, 19, 14, 17, 16, 25, 24, 22, 21, 21]

classes = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1]

plt.scatter(x, y, c=classes)
plt.show()

from sklearn.neighbors import KNeighborsClassifier
data = list(zip(x, y))

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(data, classes)

new_x = 8
new_y = 21

new_point = [(new_x, new_y)]

prediction = knn.predict(new_point)
print('The new query point belongs to class:', prediction)
plt.scatter(x + [new_x], y + [new_y], c=classes+[prediction[0]])
plt.text(x=new_x - 1, y=new_y - 1, s=f"new point")
plt.show()



#KMEANS PROGRAM
import matplotlib.pyplot as plt

x = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]
y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]

plt.scatter(x, y)
plt.show()

from sklearn.cluster import KMeans

data = list(zip(x, y))
inertias = []

for i in range(1,11):
    kmeans = KMeans(n_clusters=i)
    kmeans.fit(data)
    inertias.append(kmeans.inertia_)

plt.plot(range(1,11), inertias, marker='o')
plt.title('Elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

kmeans = KMeans(n_clusters=2)
kmeans.fit(data)

plt.scatter(x, y, c=kmeans.labels_)
plt.show()



#DATABASE PROGRAM

import mysql.connector
mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  passwd="")
print("data base connected") 
mycursor=mydb.cursor()
mycursor.execute("CREATE DATABASE csm1")
print("data base created ")


import mysql.connector
mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  passwd="",database="csm1")
print("data base connected") 
mycursor=mydb.cursor()
mycursor.execute("CREATE TABLE MGITCSD(NO INT(20),NAME VARCHAR(20))")
print("TABLE created ")

import mysql.connector
mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  passwd="",database="csm1")
print("data base connected") 
no=int(input("enter no"))
name=input("enter name")
mycursor=mydb.cursor()
sql="INSERT INTO mgitcsd (NO, NAME) VALUES (%s,%s)"
record=(no,name)
mycursor.execute(sql,record)
print("row created ")
mydb.commit()

import mysql.connector
mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  passwd="",database="csm1")
print("data base connected") 
mycursor=mydb.cursor()
mycursor.execute("SELECT * FROM mgitcsd")
myresult=mycursor.fetchall()
for row in myresult:
    print(row)




#Prime numbers between two given numbers in python
lower_value = int(input ("Please, Enter the Lowest Range Value: "))  
upper_value = int(input ("Please, Enter the Upper Range Value: "))  
  
print ("The Prime Numbers in the range are: ")  
for number in range (lower_value, upper_value + 1):  
    if number > 1:  
        for i in range (2, number):  
            if (number % i) == 0:  
                break  
        else:  
            print (number)

#check if given number is palindrome or not
num=int(input("Enter any number:"))
temp=num
rev=0
while(num>0):
    dig=num%10
    rev=rev*10+dig
    num=num//10
if(temp==rev):
    print("The {0} number is palindrome!".format(temp))
else:
    print("Not a palindrome!")



# function to check string is
# palindrome or not

a_string = 'Was it a car or a cat I saw'

def palindrome(a_string):
    a_string = a_string.lower().replace(' ', '')
    return a_string == a_string[::-1]

print(palindrome(a_string))




# Program to display the Fibonacci sequence up to n-th term

nterms = int(input("How many terms? "))

# first two terms
n1, n2 = 0, 1
count = 0

# check if the number of terms is valid
if nterms <= 0:
   print("Please enter a positive integer")
# if there is only one term, return n1
elif nterms == 1:
   print("Fibonacci sequence upto",nterms,":")
   print(n1)
# generate fibonacci sequence
else:
   print("Fibonacci sequence:")
   while count < nterms:
       print(n1)
       nth = n1 + n2
       # update values
       n1 = n2
       n2 = nth
       count += 1



num_list=[]
n=int(input("Enter the Starting of the range:"))
k=int(input("Enter the Ending of the range:"))
for i in range(n,k):
  num_list.append(i)
print("Original Number List:", num_list)
even_list=[]
odd_list=[]
for i in range(len(num_list)):
  if(num_list[i]%2==0):
    even_list.append(num_list[i])
  else:
    odd_list.append(num_list[i])
print("Even Numbers List:", even_list)
print("Odd Numbers List:", odd_list)